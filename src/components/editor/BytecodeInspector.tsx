import React, { useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Code2, 
  FileCode, 
  Hash, 
  Copy, 
  Layers,
  Database,
  Package,
  Terminal,
  FileText,
  Download
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { 
  parseBytecodeModules, 
  parseDisassembly,
  formatFileSize,
  BytecodeModule,
  DisassemblyInfo
} from '@/lib/bytecodeUtils';
import { CompilationResult } from '@/lib/types';
import { cn } from '@/lib/utils';

interface BytecodeInspectorProps {
  lastCompilation: CompilationResult | null;
}

export function BytecodeInspector({ lastCompilation }: BytecodeInspectorProps) {
  const [selectedModule, setSelectedModule] = useState<number>(0);
  const { toast } = useToast();

  // Empty state
  if (!lastCompilation?.success || !lastCompilation.modules?.length) {
    return (
      <div className="flex flex-col items-center justify-center py-16 px-4">
        <div className="rounded-full bg-muted/30 p-6 mb-6">
          <Package className="h-12 w-12 text-muted-foreground/40" />
        </div>
        <div className="text-center space-y-2">
          <h3 className="font-semibold text-lg">No bytecode available</h3>
          <p className="text-sm text-muted-foreground max-w-md">
            Compile your Move contract to inspect the generated bytecode, view disassembly, and analyze module structure.
          </p>
        </div>
      </div>
    );
  }

  const modules = parseBytecodeModules(lastCompilation.modules);
  const disassemblyInfo = lastCompilation.disassembly 
    ? parseDisassembly(lastCompilation.disassembly) 
    : null;

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Content has been copied successfully",
    });
  };

  const downloadContent = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Header with Module Info */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2">
              <Package className="h-5 w-5 text-primary" />
              <h2 className="text-lg font-semibold">Bytecode Inspector</h2>
            </div>
            <Badge variant="secondary" className="text-xs font-medium">
              {modules.length} module{modules.length !== 1 ? 's' : ''}
            </Badge>
          </div>
          <p className="text-sm text-muted-foreground">
            Inspect compiled Move bytecode, view disassembly, and analyze module metadata
          </p>
        </div>
        
        {/* Module Selector for multiple modules */}
        {modules.length > 1 && (
          <Select value={selectedModule.toString()} onValueChange={(value) => setSelectedModule(parseInt(value))}>
            <SelectTrigger className="w-64">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {modules.map((module, index) => (
                <SelectItem key={index} value={index.toString()}>
                  <div className="flex items-center justify-between w-full">
                    <span className="font-mono text-sm">{module.name}</span>
                    <span className="text-xs text-muted-foreground ml-4">
                      {formatFileSize(module.size)}
                    </span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )}
      </div>

      {/* Current Module Info Bar */}
      <div className="flex items-center justify-between p-4 bg-muted/30 rounded-lg border">
        <div className="flex items-center gap-6">
          <div className="flex items-center gap-2">
            <FileCode className="h-4 w-4 text-muted-foreground" />
            <span className="font-mono text-sm font-medium">
              {modules[selectedModule]?.name || 'Module'}
            </span>
          </div>
          <div className="flex items-center gap-2">
            <Database className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm text-muted-foreground">
              {formatFileSize(modules[selectedModule]?.size || 0)}
            </span>
          </div>
          <div className="flex items-center gap-2">
            <Hash className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm text-muted-foreground">Move Bytecode v6</span>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            size="sm"
            variant="outline"
            onClick={() => copyToClipboard(modules[selectedModule]?.bytecode || '')}
            className="text-xs"
          >
            <Copy className="h-3 w-3 mr-1" />
            Copy
          </Button>
          <Button
            size="sm"
            variant="outline"
            onClick={() => downloadContent(
              modules[selectedModule]?.bytecode || '', 
              `${modules[selectedModule]?.name || 'module'}.mv`
            )}
            className="text-xs"
          >
            <Download className="h-3 w-3 mr-1" />
            Download
          </Button>
        </div>
      </div>

      {/* Content Tabs */}
      <Tabs defaultValue="hex" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="hex" className="flex items-center gap-2">
            <Terminal className="h-3 w-3" />
            Hex Dump
          </TabsTrigger>
          <TabsTrigger value="disassembly" className="flex items-center gap-2">
            <FileCode className="h-3 w-3" />
            Disassembly
          </TabsTrigger>
          <TabsTrigger value="metadata" className="flex items-center gap-2">
            <FileText className="h-3 w-3" />
            Metadata
          </TabsTrigger>
        </TabsList>

        {/* Hex View */}
        <TabsContent value="hex" className="mt-4">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium flex items-center gap-2">
                <Hash className="h-4 w-4" />
                Hexadecimal Dump
              </h3>
              <Button
                size="sm"
                variant="ghost"
                onClick={() => copyToClipboard(modules[selectedModule]?.hex || '')}
              >
                <Copy className="h-3 w-3 mr-1" />
                Copy Hex
              </Button>
            </div>
            
            <div className="border rounded-lg overflow-hidden">
              <ScrollArea className="h-96">
                <div className="p-0">
                  <pre className="text-xs font-mono leading-relaxed p-4 bg-slate-50 dark:bg-slate-900/50">
                    {modules[selectedModule]?.hex || 'No hex data available'}
                  </pre>
                </div>
              </ScrollArea>
            </div>
          </div>
        </TabsContent>

        {/* Disassembly View */}
        <TabsContent value="disassembly" className="mt-4">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium flex items-center gap-2">
                <FileCode className="h-4 w-4" />
                Move Disassembly
              </h3>
              {lastCompilation.disassembly && (
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => copyToClipboard(lastCompilation.disassembly || '')}
                  >
                    <Copy className="h-3 w-3 mr-1" />
                    Copy
                  </Button>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => downloadContent(
                      lastCompilation.disassembly || '', 
                      `${modules[selectedModule]?.name || 'module'}.disasm`
                    )}
                  >
                    <Download className="h-3 w-3 mr-1" />
                    Download
                  </Button>
                </div>
              )}
            </div>
            
            <div className="border rounded-lg overflow-hidden">
              <ScrollArea className="h-96">
                {lastCompilation.disassembly ? (
                  <div className="p-0">
                    <pre className="text-xs font-mono leading-relaxed p-4 bg-slate-50 dark:bg-slate-900/50 whitespace-pre">
                      {lastCompilation.disassembly}
                    </pre>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-full p-8 text-center">
                    <FileCode className="h-12 w-12 text-muted-foreground/20 mb-4" />
                    <h4 className="font-medium text-muted-foreground mb-2">
                      Disassembly not available
                    </h4>
                    <p className="text-sm text-muted-foreground max-w-sm">
                      The Move compiler did not generate disassembly output for this module.
                    </p>
                  </div>
                )}
              </ScrollArea>
            </div>
          </div>
        </TabsContent>

        {/* Metadata View */}
        <TabsContent value="metadata" className="mt-4">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Module Metadata
              </h3>
            </div>
            
            <div className="border rounded-lg overflow-hidden">
              <ScrollArea className="h-96">
                {disassemblyInfo && (disassemblyInfo.identifiers.length > 0 || 
                                   disassemblyInfo.functionHandles.length > 0) ? (
                  <div className="p-6 space-y-6">
                    {/* Identifiers */}
                    {disassemblyInfo.identifiers.length > 0 && (
                      <div className="space-y-3">
                        <div className="flex items-center gap-2 pb-2 border-b">
                          <Hash className="h-4 w-4 text-primary" />
                          <h4 className="font-medium">Identifiers</h4>
                          <Badge variant="outline" className="text-xs">
                            {disassemblyInfo.identifiers.length}
                          </Badge>
                        </div>
                        <div className="grid gap-2">
                          {disassemblyInfo.identifiers.map((identifier, index) => (
                            <div 
                              key={index}
                              className="flex items-center justify-between p-3 bg-muted/30 rounded-md border"
                            >
                              <span className="font-mono text-sm">{identifier}</span>
                              <span className="text-xs text-muted-foreground">#{index}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Function Handles */}
                    {disassemblyInfo.functionHandles.length > 0 && (
                      <div className="space-y-3">
                        <div className="flex items-center gap-2 pb-2 border-b">
                          <Code2 className="h-4 w-4 text-primary" />
                          <h4 className="font-medium">Function Handles</h4>
                          <Badge variant="outline" className="text-xs">
                            {disassemblyInfo.functionHandles.length}
                          </Badge>
                        </div>
                        <div className="grid gap-2">
                          {disassemblyInfo.functionHandles.slice(0, 20).map((handle, index) => (
                            <div 
                              key={index}
                              className="p-3 bg-muted/30 rounded-md border"
                            >
                              <span className="font-mono text-xs text-muted-foreground">{handle}</span>
                            </div>
                          ))}
                          {disassemblyInfo.functionHandles.length > 20 && (
                            <div className="text-center py-2">
                              <span className="text-xs text-muted-foreground">
                                ... and {disassemblyInfo.functionHandles.length - 20} more
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-full p-8 text-center">
                    <FileText className="h-12 w-12 text-muted-foreground/20 mb-4" />
                    <h4 className="font-medium text-muted-foreground mb-2">
                      No metadata available
                    </h4>
                    <p className="text-sm text-muted-foreground max-w-sm">
                      Module metadata will appear here after successful compilation with disassembly output.
                    </p>
                  </div>
                )}
              </ScrollArea>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}